{

  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "AWS CloudFormation sample template that contains a single Lambda function behind an API Gateway",


  "Resources": {

    "BidAmountUpdate": {

      "Type": "AWS::Lambda::Function",

      "Properties": {

        "Code": {

          "ZipFile": { "Fn::Join": ["\n", [

            "import boto3,json",
            "from boto3.dynamodb.conditions import Key, Attr",
            "def lambda_handler(event, context):",
            "   dynamodb = boto3.resource('dynamodb')",
            "   bidtbl = dynamodb.Table('Bidding')",
            "   matchId=int(event['queryStringParameters']['mid'])",

            "   getLos=''",
            "   usrfault=False",
            "   fmail=[]",

            "   getWin=bidtbl.scan(FilterExpression=Attr('winner').eq('WIN') & Attr('matchId').eq(matchId))",
            "   getWin=getWin['Items']",
            "   # print 'getWin',len(getWin)",
            "   team=''",
            "   for i in range(len(getWin)):",
            "      if getWin != []:",
            "         if team !='':",
            "            if team != getWin[i]['team']:",
            "               return { \"statusCode\" : 302,\"headers\": { \"Location\" : \"https://s3.ap-south-1.amazonaws.com/suraj-console/invalidTeam.html\"}}",
            "         team=getWin[i]['team']",

            "   if team=='':",
            "      getLos=bidtbl.scan(FilterExpression=Attr('winner').eq('LOS') & Attr('matchId').eq(matchId))",
            "      getLos=getLos['Items']",
            "      if getLos == []:",
            "         return { \"statusCode\" : 302,\"headers\": { \"Location\" : \"https://s3.ap-south-1.amazonaws.com/suraj-console/invalidData.html\"}}",
            "      else:",
            "         return { \"statusCode\" : 302,\"headers\": { \"Location\" : \"https://s3.ap-south-1.amazonaws.com/suraj-console/noAnyWinner.html\"}}",

            "   winBid = 0",
            "   response = bidtbl.scan(FilterExpression=Attr('team').eq(team) & Attr('matchId').eq(matchId))",
            "   winers = response['Items']",
            "   for l in winers:",
            "      winBid = winBid + l['bidAmt']",

            "   losBid=0",
            "   resource = bidtbl.scan(FilterExpression=Attr('team').ne(team) & Attr('matchId').eq(matchId))",
            "   losers=resource['Items']",
            "   for ls in losers:",
            "      losBid = losBid + ls['bidAmt']",

            "   usrtbl=dynamodb.Table('BidderReg')",

            "   flag=False",
            "   for l in range(len(winers)):",
            "      winshare=winers[l]['bidAmt']/winBid",
            "      mail = winers[l]['emailId']",
            "      bidAmt=winshare*losBid+winers[l]['bidAmt']",
            "      userinfo = usrtbl.query(KeyConditionExpression=Key('EmailID').eq(mail))",
            "      user=userinfo['Items']",
            "      if user == []:",
            "         usrfault=True",
            "         fmail.append(mail)",
            "      else:",
            "         for i in range(len(user)):",
            "            bal=user[i]['Amt']",
            "            user[i]['Amt']=bal+int(bidAmt)",
            "            usrtbl.put_item(Item=user[i])",
            "            flag=True",

            "   if usrfault:",
            "      return { \"statusCode\" : 302,\"headers\": { \"Location\" : \"https://s3.ap-south-1.amazonaws.com/suraj-console/invalidUser.html?fmail=\"+str(fmail)}}",
            "   elif flag:",
            "      return { \"statusCode\" : 302,\"headers\": { \"Location\" : \"https://s3.ap-south-1.amazonaws.com/divyaranitraining/success.html\"}}",
            "   else:",
            "      return { \"statusCode\" : 302,\"headers\": { \"Location\" : \"https://s3.ap-south-1.amazonaws.com/divyaranitraining/biddingpage.html\" }}"

          ]]}

        },

        "Description": "Bidding Amount update function",

        "FunctionName": "BidAmountUpdate",

        "Handler": "index.lambda_handler",

        "Role": { "Fn::GetAtt": ["LambdaExecutionRole", "Arn"]},

        "Runtime": "python2.7"

      }

    },




    "LambdaExecutionRole": {

      "Type": "AWS::IAM::Role",

      "Properties": {

        "AssumeRolePolicyDocument": {

          "Version": "2012-10-17",

          "Statement": [{

            "Effect": "Allow",

            "Principal": { "Service": ["lambda.amazonaws.com"] },

            "Action": ["sts:AssumeRole"]

          }]

        },

		  "Policies": [{

          "PolicyName": "DDBwriteAccessPolicy",

          "PolicyDocument": {

            "Version": "2012-10-17",

            "Statement": [{

              "Effect": "Allow",

              "Action": "*",


              "Resource": ["arn:aws:dynamodb:us-east-1:488599217855:table/Bidding",

              				"arn:aws:dynamodb:us-east-1:488599217855:table/BidderReg",

							"arn:aws:dynamodb:*:*:table/*/backup/*"]

            },{

			    "Effect": "Allow",

          "Action": ["dynamodb:TagResource","dynamodb:UntagResource",

			  "dynamodb:PurchaseReservedCapacityOfferings"],

			"Resource": "*"

			}

			]

          }

        }],

        "ManagedPolicyArns": ["arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"]

      }

    },



    "bidAmountApi": {

      "Type": "AWS::ApiGateway::RestApi",

      "Properties": {

        "Name": "Bidding Amount update API",

        "Description": "API used for bidding table update",

        "FailOnWarnings": true

      }

    },



    "LambdaPermission": {

      "Type": "AWS::Lambda::Permission",

      "Properties": {

        "Action": "lambda:invokeFunction",

        "FunctionName": {"Fn::GetAtt": ["BidAmountUpdate", "Arn"]},

        "Principal": "apigateway.amazonaws.com",

        "SourceArn": {"Fn::Join": ["", ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "bidAmountApi"}, "/*"]]}

      }

    },



    "ApiGatewayCloudWatchLogsRole": {

      "Type": "AWS::IAM::Role",

      "Properties": {

        "AssumeRolePolicyDocument": {

          "Version": "2012-10-17",

          "Statement": [{

            "Effect": "Allow",

            "Principal": { "Service": ["apigateway.amazonaws.com"] },

            "Action": ["sts:AssumeRole"]

          }]

        },

        "Policies": [{

          "PolicyName": "ApiGatewayLogsPolicy",

          "PolicyDocument": {

            "Version": "2012-10-17",

            "Statement": [{

              "Effect": "Allow",

              "Action": [

                "logs:CreateLogGroup",

                "logs:CreateLogStream",

                "logs:DescribeLogGroups",

                "logs:DescribeLogStreams",

                "logs:PutLogEvents",

                "logs:GetLogEvents",

                "logs:FilterLogEvents"

              ],

              "Resource": "*"

            }]

          }

        }]

      }

    },



    "ApiGatewayAccount": {

      "Type": "AWS::ApiGateway::Account",

      "Properties": {

        "CloudWatchRoleArn": {"Fn::GetAtt": ["ApiGatewayCloudWatchLogsRole", "Arn"] }

      }

    },



    "BiddingAmountApiStage": {

      "DependsOn": ["ApiGatewayAccount"],

      "Type": "AWS::ApiGateway::Stage",

      "Properties": {

        "DeploymentId": {"Ref": "ApiDeployment"},

        "MethodSettings": [{

          "DataTraceEnabled": true,

          "HttpMethod": "*",

          "LoggingLevel": "INFO",

          "ResourcePath": "/*"

        }],

        "RestApiId": {"Ref": "bidAmountApi"},

        "StageName": "LATEST",

        "Variables": {

          "Suraj": "Test"

        }

      }

    },



    "ApiDeployment": {

      "Type": "AWS::ApiGateway::Deployment",

      "DependsOn": ["BidAmtUpdateGET", "BidAmtUpdatePOST"],

      "Properties": {

        "RestApiId": {"Ref": "bidAmountApi"},

        "StageName": "TestStage"

      }

    },



    "BidAmountResource": {

      "Type": "AWS::ApiGateway::Resource",

      "Properties": {

        "RestApiId": {"Ref": "bidAmountApi"},

        "ParentId": {"Fn::GetAtt": ["bidAmountApi", "RootResourceId"]},

        "PathPart": "UpdateAccount"

      }

    },



    "BidAmtUpdateGET": {

      "DependsOn": "LambdaPermission",

      "Type": "AWS::ApiGateway::Method",

      "Properties": {

        "AuthorizationType": "NONE",

        "HttpMethod": "GET",

        "Integration": {

          "Type": "AWS_PROXY",

          "IntegrationHttpMethod": "POST",

          "Uri": {"Fn::Join": ["",

            ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["BidAmountUpdate", "Arn"]}, "/invocations"]

          ]},

          "IntegrationResponses": [{

            "StatusCode": 200

          }]

        },

        "RequestParameters": {

          "method.request.querystring.name": false

        },

        "ResourceId": {"Ref": "BidAmountResource"},

        "RestApiId": {"Ref": "bidAmountApi"},

        "MethodResponses": [{

          "StatusCode": 200

        }]

      }

    },



    "BidAmtUpdatePOST": {

      "DependsOn": "LambdaPermission",

      "Type": "AWS::ApiGateway::Method",

      "Properties": {

        "AuthorizationType": "NONE",

        "HttpMethod": "POST",

        "Integration": {

          "Type": "AWS_PROXY",

          "IntegrationHttpMethod": "POST",

          "Uri": {"Fn::Join": ["",

            ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["BidAmountUpdate", "Arn"]}, "/invocations"]

          ]},

          "IntegrationResponses": [{

            "StatusCode": 200

          }]

        },

        "RequestParameters": {

          "method.request.querystring.name": false

        },

        "ResourceId": {"Ref": "BidAmountResource"},

        "RestApiId": {"Ref": "bidAmountApi"},

        "MethodResponses": [{

          "StatusCode": 200

        }]

      }

    }
  },



  "Outputs": {

    "RootUrl": {

      "Description": "Root URL of the API gateway",

      "Value": {"Fn::Join": ["", ["https://", {"Ref": "bidAmountApi"}, ".execute-api.", {"Ref": "AWS::Region"}, ".amazonaws.com"]]}

    }

  }

}
